[{"/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/store.js":"1","/Users/macbook/Desktop/playpower/todo-app/frontend/src/components/CreateNewItem.js":"2","/Users/macbook/Desktop/playpower/todo-app/frontend/src/components/Bucket.js":"3","/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/reducers/TodoReducer.reducer.js":"4","/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/reducers/BukcetReducer.js":"5","/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/actions/TodoAction.js":"6","/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/actions/todoActionTypes.js":"7","/Users/macbook/Desktop/playpower/todo-app/frontend/src/components/Todo.js":"8","/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/actions/BucketsActions.js":"9","/Users/macbook/Desktop/playpower/todo-app/frontend/src/index.js":"10","/Users/macbook/Desktop/playpower/todo-app/frontend/src/utils.js":"11","/Users/macbook/Desktop/playpower/todo-app/frontend/src/App.js":"12","/Users/macbook/Desktop/playpower/todo-app/frontend/src/reportWebVitals.js":"13"},{"size":478,"mtime":1609969880149,"results":"14","hashOfConfig":"15"},{"size":4295,"mtime":1609974490873,"results":"16","hashOfConfig":"15"},{"size":4346,"mtime":1609973985671,"results":"17","hashOfConfig":"15"},{"size":4108,"mtime":1609975863722,"results":"18","hashOfConfig":"15"},{"size":1706,"mtime":1609975885688,"results":"19","hashOfConfig":"15"},{"size":3632,"mtime":1609975676268,"results":"20","hashOfConfig":"15"},{"size":542,"mtime":1609971300103,"results":"21","hashOfConfig":"15"},{"size":2095,"mtime":1609973436892,"results":"22","hashOfConfig":"15"},{"size":2347,"mtime":1609975615583,"results":"23","hashOfConfig":"15"},{"size":669,"mtime":1609857127607,"results":"24","hashOfConfig":"15"},{"size":97,"mtime":1609878502573,"results":"25","hashOfConfig":"15"},{"size":1739,"mtime":1609975696835,"results":"26","hashOfConfig":"15"},{"size":362,"mtime":1609850958542,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1a26rxd",{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"34","usedDeprecatedRules":"35"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/store.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/components/CreateNewItem.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/components/Bucket.js",["56","57"],"import { Fragment, Component } from \"react\";\nimport * as _ from \"lodash\";\nimport { connect } from \"react-redux\";\nimport { Card, ListGroup, ListGroupItem, Button } from \"react-bootstrap\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlus } from \"@fortawesome/free-solid-svg-icons\";\nimport { addTodo, addInputBar, toggleTodoState, updateTodoApi } from \"../redux/actions/TodoAction\";\nimport AddTask from \"./CreateNewItem\";\nimport Todo from \"./Todo\";\nimport { TYPES } from \"../utils\";\nimport { addInputBar_Bucket } from \"../redux/actions/BucketsActions\";\n\nclass Bucket extends Component {\n\n    render() {\n        let totalItems = this.props.listItems.length;\n        let borderStyle = {};\n        if (this.props.bucket) {\n            borderStyle = {\n                borderTop: `7px solid #${this.props.bucket.color}`\n            };\n        }\n        return (\n            <Card>\n                <Card.Body style={borderStyle}>\n                    {this.props.addNew &&\n                        <Card.Body className=\"text-center\">\n                            {this.props.isAddBucketClicked ?\n                                <AddTask type={TYPES.ADD_BUCKET} />\n                                : <Button variant=\"link\" onClick={this.props.onAddBucketClick}>\n                                    <FontAwesomeIcon icon={faPlus} className=\"icons\" /> Add new bucket\n                        </Button>}\n                        </Card.Body>\n                    }\n                    {!this.props.addNew &&\n                        <Fragment>\n                            <Card.Title>{this.props.bucket.name}</Card.Title>\n                            <Card.Subtitle className=\"mb-2 text-muted\">{totalItems} Card{totalItems > 1 ? \"s\" : \"\"}</Card.Subtitle>\n                            <ListGroup className=\"list-group-flush\">\n                                <ListGroupItem>\n                                    {this.props.isAddTaskClicked ?\n                                        <AddTask type={TYPES.ADD_TODO} bucket={this.props.bucket} /> :\n                                        <Button variant=\"link\" onClick={() => {\n                                            this.props.onAddTask(this.props.bucket.id)\n                                        }}>\n                                            <FontAwesomeIcon icon={faPlus} className=\"icons\" /> Add new tasks\n                                        </Button>\n                                    }\n                                </ListGroupItem>\n                                {this.props.listItems && this.props.listItems.map(item => {\n                                    if (item.bucketId === this.props.bucket.id)\n                                        return (< ListGroupItem key={item.id}\n                                            className={item.completed ? \"todo completed\" : \"todo\"}\n                                            onClick={(e) => {\n                                                if (e.target === e.currentTarget)\n                                                    this.props.toggleSelection(item.id, !item.completed)\n                                            }}>\n                                            <Todo item={item} bucket={this.props.bucket} />\n                                        </ListGroupItem>)\n                                    return null;\n                                })}\n                            </ListGroup>\n                        </Fragment>\n                    }\n                </Card.Body>\n            </Card >)\n    }\n}\nconst mapDispatchToProps = dispatch => ({\n    addTodo: todo => dispatch(addTodo(todo)),\n    onAddTask: (e) => dispatch(addInputBar(e)),\n    onAddBucketClick: () => dispatch(addInputBar_Bucket()),\n    toggleSelection: (id, completed) => { dispatch(updateTodoApi({ id, completed })) }\n});\nconst mapStateToProps = ({ todos, buckets }, passedProps) => {\n    let listItems = passedProps.bucket ? todos.todos.filter(todo => todo.bucketId === passedProps.bucket.id) : [];\n    let isAddTaskClicked = todos.isAddTaskClicked && passedProps.bucket && todos.bucketId === passedProps.bucket.id;\n    return {\n        isAddTaskClicked,\n        listItems,\n        ...passedProps,\n        isAddBucketClicked: buckets.isAddBucketClicked\n    }\n};\nexport default connect(mapStateToProps, mapDispatchToProps)(Bucket);",["58","59"],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/reducers/TodoReducer.reducer.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/reducers/BukcetReducer.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/actions/TodoAction.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/actions/todoActionTypes.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/components/Todo.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/redux/actions/BucketsActions.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/index.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/utils.js",[],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/App.js",["60","61"],"/Users/macbook/Desktop/playpower/todo-app/frontend/src/reportWebVitals.js",[],{"ruleId":"62","severity":1,"message":"63","line":2,"column":13,"nodeType":"64","messageId":"65","endLine":2,"endColumn":14},{"ruleId":"62","severity":1,"message":"66","line":7,"column":32,"nodeType":"64","messageId":"65","endLine":7,"endColumn":47},{"ruleId":"67","replacedBy":"68"},{"ruleId":"69","replacedBy":"70"},{"ruleId":"62","severity":1,"message":"71","line":7,"column":10,"nodeType":"64","messageId":"65","endLine":7,"endColumn":22},{"ruleId":"62","severity":1,"message":"72","line":9,"column":10,"nodeType":"64","messageId":"65","endLine":9,"endColumn":24},"no-unused-vars","'_' is defined but never used.","Identifier","unusedVar","'toggleTodoState' is defined but never used.","no-native-reassign",["73"],"no-negated-in-lhs",["74"],"'persistTodos' is defined but never used.","'persistBuckets' is defined but never used.","no-global-assign","no-unsafe-negation"]